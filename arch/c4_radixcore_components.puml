@startuml c4_node_component

!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Component.puml

LAYOUT_WITH_LEGEND

System_Ext(ws_app1, "WebSocket Client", "Custom Application that uses the WebSocket API directly or indirectly (lib).")
System_Ext(node1, "Core Node 1", "Other Core Node in an **overlapping** Shard space")
System_Ext(node2, "Core Node 2", "Other Core Node in the **non-overlapping** Shard space")
System_Ext(ntp1, "NTP Server", "Standard Network Time Protocol Server on the internet.")

Container(iptables, "Rate Limiter", "Container: Linux Kernel", "DDoS mitigation of Gossip/Sync from malicious nodes")
Container(nginx, "Reverse Proxy", "Container: NGINX/HAProxy in Docker", "TLS termination, DDoS mitigation, authentication, and filtering of API requests")
ContainerDb(ledger, "Ledger Data", "Container: Docker Volume", "Persists ledger data, metadata, index, and bloom filter.")
ContainerDb(secrets, "Secrets", "Container: Docker Volume", "Stores node keys, certificates, and API passwords.")

Boundary(core_nodes, "RadixCore", "Container") {
    Component(api, "HTTP/WebSocket Service", "Component: Undertow", "[[http://undertow.io/ Undertow]] is the HTTP/WebSocket server Component.")
    Component(atoms, "Data Model", "Component: Atom Model", "Radix proprietary UTXO data model.")

    Boundary(utxo_driver, "UTXO Physical Memory Driver") {
        Component(store_events, "Store Events", "Component: ???")
        Component(delete_events, "Delete Events", "Component: ???")
        Component(validation_errors, "Validation Errors", "Component: ???")
        Component(conflicts, "Conflicts", "Component: Queue???")
        Component(rt_read_updates, "Real-time Read Updates ???", "Component: ???")
        Component(rt_data_syncs, "Real-time Data Sync ???", "Component: ???")
        Component(read_scheduler, "Read Scheduler ???", "Component: ???")
        Boundary(validate_pipeline, "Validate/Update Pipeline") {
            Component(utxo_checker, "Stateless UTXO Check", "Component: ???")
            Component(atomic_state_manager, "Atomic State Manager???", "Component: ???")
            Rel_(utxo_checker, atomic_state_manager, "uses (valid Atom only)", "-->")
        }
        Rel_(store_events, utxo_checker, "uses", "-->")
        Rel_(delete_events, atomic_state_manager, "uses", "-->")
        Rel_(utxo_checker, validation_errors, "notifies???", "-->")
        Rel_(atomic_state_manager, conflicts, "notifies???", "-->")
        Rel_(atomic_state_manager, rt_read_updates, "notifies???", "-->")
        Rel_(rt_read_updates, rt_data_syncs, "notifies???", "-->")
        Rel_(rt_data_syncs, read_scheduler, "read initial state", "-->")
    }

    Component(spinstate_checker, "Spin State Check", "Component: ???")
    Component(utxo_virtual_memory, "UTXO Virtualized Memory", "Component: ???")

    Boundary(app_layer, "Application Layer") {
        Component(app_rules1, "App Rules 1", "Component: Scrypt", "Optimised DSL for Particle specific constraints")
        Component(app_rules2, "App Rules 2", "Component: Scrypt", "Optimised DSL for Particle specific constraints")
        Component(cm_manager, "Constraint Machine Manager", "Component: AtomOS", "Compiles *App Rules* into *Contraint Logic Procedures* and manages the life-cycle of Constraint Machines.")

        Boundary(hardware_validation, "Hardware Validation") {
            Component(cm, "UTXO Hardware", "Component: Constraint Machine", "Hierarchical Finite State Machine (HFSM).")
            Component(clp1, "Constraint Logic Procedure 1", "Component: Dynamic", "Compiled HFSM guard condition (from App Rule 1).")
            Component(clp2, "Constraint Logic Procedure 2", "Component: Dynamic", "Compiled HFSM guard condition (from App Rule 2).")

            Rel_(cm, clp1, "evaluates valid UTXO", "-->")
            Rel_(cm, clp2, "evaluates valid UTXO", "-->")
        }

        Rel_(app_rules1, cm_manager, "registers with", "-->")
        Rel_(app_rules2, cm_manager, "registers with", "-->")
        Rel_(cm_manager, clp1, "compiles???", "-->")
        Rel_(cm_manager, clp2, "compiles???", "-->")
    }

    Rel_(utxo_checker, cm, "validates atom with", "-->")
    Rel_(cm_manager, utxo_virtual_memory, "defines hw config", "-->")
    Rel_(cm, spinstate_checker, "validate Atom local state", "-->")
    Rel_(spinstate_checker, utxo_virtual_memory, "pass-through read UTXO state", "-->")
    Rel_(atomic_state_manager, spinstate_checker, "validates against global state", "-->")

    Component(tempo, "Physical Memory Manager", "Component: Tempo", "Radix proprietary (patent pending) consensus engine.")
    Component(atomstore, "UTXO Physical Memory", "Component: Atom Store", "Optimises and abstracts DB access to key/value databases")
    Component(berkley, "Key/Value Store", "Component: Berkley DB Java Edition", "[[https://docs.oracle.com/cd/E17277_02/html/index.html Berkley DB]] stores Atoms and various metadata.")
    Component(gossip_listener, "Gossip Listener", "Component: Networking", "Listenes and enqueues Gossip from remote peers")

    Rel_(read_scheduler, atomstore, "reads from", "-->")
    Rel_(atomic_state_manager, atomstore, "stores to, deletes from", "-->")
    Rel_(utxo_virtual_memory, atomstore, "pass-through read UTXO state", "-->")

    Rel_(tempo, store_events, "submits to???", "-->")
    Rel_(tempo, delete_events, "submits to???", "-->")
    Rel_(validation_errors, tempo, "notifies???", "-->")
    Rel_(conflicts, tempo, "notifies???", "-->")
    Rel_(rt_read_updates, tempo, "notifies???", "-->")
    Rel_(tempo, rt_data_syncs, "queries???", "-->")

    Rel_(api, atoms, "deserializes to", "-->")
    Rel_(api, store_events, "submits to???", "-->")
    Rel_(api, rt_read_updates, "queries???", "-->")
    
    Rel_(atomstore, berkley, "uses", "-->")
}

Rel_(berkley, ledger, "uses", "-->")

Rel_(ws_app1, nginx, "uses", "HTTPS port 443", "-->")
Rel_(nginx, api, "uses", "HTTP port 8080", "-->")

Rel_(node2, iptables, "gossips to", "UDP port 10000", "-->")
Rel_(iptables, gossip_listener, "forwards to", "UDP port 10000", "-->")

@enduml
